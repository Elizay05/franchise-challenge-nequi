package com.example.franchise_challenge.domain.usecase;

import com.example.franchise_challenge.domain.exceptions.FranchiseAlreadyExistsException;
import com.example.franchise_challenge.domain.model.FranchiseModel;
import com.example.franchise_challenge.domain.spi.IFranchisePersistencePort;
import com.example.franchise_challenge.domain.utils.constants.DomainConstants;
import com.example.franchise_challenge.domain.validationsUseCase.FranchiseValidations;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

@ExtendWith(MockitoExtension.class)
public class FranchiseUseCaseTest {

    @Mock
    private IFranchisePersistencePort franchisePersistencePort;

    @Mock
    private FranchiseValidations franchiseValidations;

    @InjectMocks
    private FranchiseUseCase franchiseUseCase;

    @Test
    public void test_create_franchise_success() {
        // Arrange
        FranchiseModel franchiseModel = new FranchiseModel(1L, "Test Franchise");

        Mockito.when(franchiseValidations.validateFranchiseDoesNotExist("Test Franchise"))
                .thenReturn(Mono.empty());
        Mockito.when(franchisePersistencePort.saveFranchise(franchiseModel))
                .thenReturn(Mono.empty());

        // Act
        StepVerifier.create(franchiseUseCase.createFranchise(franchiseModel))
                // Assert
                .verifyComplete();

        Mockito.verify(franchiseValidations).validateFranchiseDoesNotExist("Test Franchise");
        Mockito.verify(franchisePersistencePort).saveFranchise(franchiseModel);
    }

    @Test
    public void test_update_name_success() {
        // Arrange
        Long franchiseId = 1L;
        String newName = "New Franchise Name";

        
        Mockito.when(franchiseValidations.validateFranchiseExists(franchiseId)).thenReturn(Mono.empty());
        Mockito.when(franchiseValidations.validateFranchiseDoesNotExist(newName)).thenReturn(Mono.empty());
        Mockito.when(franchisePersistencePort.updateName(franchiseId, newName)).thenReturn(Mono.empty());

        // Act
        StepVerifier.create(franchiseUseCase.updateName(franchiseId, newName))
                .verifyComplete();

        // Assert
        Mockito.verify(franchiseValidations).validateFranchiseExists(franchiseId);
        Mockito.verify(franchiseValidations).validateFranchiseDoesNotExist(newName);
        Mockito.verify(franchisePersistencePort).updateName(franchiseId, newName);
    }
}
